--
-- VHDL Test Bench CAD_lib.lab8_arbiter_tb.lab8_arbiter_tester
--
-- Created:
--          by - W.UNKNOWN (DESKTOP-86TQKQ1)
--          at - 14:37:40 04/ 6/2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
LIBRARY CAD_lib;
USE CAD_lib.RV32I.ALL;
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE work.RV32I.ALL;
USE std.textio.all;

ENTITY lab8_arbiter_tb IS
END lab8_arbiter_tb;


LIBRARY CAD_lib;
USE CAD_lib.ALL;


ARCHITECTURE rtl OF lab8_arbiter_tb IS

   -- Architecture declarations
  FILE test_vectors : text OPEN read_mode IS "lab8_arb_vec.txt";	
   -- Internal signal declarations
   SIGNAL mdelay       : std_ulogic;
   SIGNAL MemSyst_Din  : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL MStg_Din     : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL Mstg_Addr    : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL Fetch_addr   : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL Mstg_w       : std_ulogic;
   SIGNAL Mstg_r       : std_ulogic;
   SIGNAL Fetch_r      : std_ulogic;
   SIGNAL MStg_Dout,MStg_Dout_valid    : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL MemSyst_Dout,MemSyst_Dout_valid : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL Fetch_Dout,Fetch_Dout_valid   : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL MemSyst_Addr,MemSyst_Addr_valid : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL mdelayF,mdelayF_valid      : std_ulogic;
   SIGNAL mdelayM,mdelayM_valid      : std_ulogic;

   SIGNAL check_valid :std_ulogic;
   SIGNAL vecno : NATURAL := 0;
   -- Component declarations
   COMPONENT lab8_arbiter
      PORT (
         mdelay       : IN     std_ulogic;
         MemSyst_Din  : IN     std_ulogic_vector(31 DOWNTO 0);
         MStg_Din     : IN     std_ulogic_vector(31 DOWNTO 0);
         Mstg_Addr    : IN     std_ulogic_vector(31 DOWNTO 0);
         Fetch_addr   : IN     std_ulogic_vector(31 DOWNTO 0);
         Mstg_w       : IN     std_ulogic;
         Mstg_r       : IN     std_ulogic;
         Fetch_r      : IN     std_ulogic;
         MStg_Dout    : OUT    std_ulogic_vector(31 DOWNTO 0);
         MemSyst_Dout : OUT    std_ulogic_vector(31 DOWNTO 0);
         Fetch_Dout   : OUT    std_ulogic_vector(31 DOWNTO 0);
         MemSyst_Addr : OUT    std_ulogic_vector(31 DOWNTO 0);
         mdelayF      : OUT    std_ulogic;
         mdelayM      : OUT    std_ulogic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR U_0 : lab8_arbiter USE ENTITY CAD_lib.lab8_arbiter;
   -- pragma synthesis_on

BEGIN

         U_0 : lab8_arbiter
            PORT MAP (
               mdelay       => mdelay,
               MemSyst_Din  => MemSyst_Din,
               MStg_Din     => MStg_Din,
               Mstg_Addr    => Mstg_Addr,
               Fetch_addr   => Fetch_addr,
               Mstg_w       => Mstg_w,
               Mstg_r       => Mstg_r,
               Fetch_r      => Fetch_r,
               MStg_Dout    => MStg_Dout,
               MemSyst_Dout => MemSyst_Dout,
               Fetch_Dout   => Fetch_Dout,
               MemSyst_Addr => MemSyst_Addr,
               mdelayF      => mdelayF,
               mdelayM      => mdelayM
            );
stim: process
  VARIABLE L : LINE;
  VARIABLE v_permission_input: std_ulogic_vector(2 downto 0); -- MStg_w/Mstg_r/fetch_r
  VARIABLE v_mdelay :std_ulogic;
  VARIABLE v_MemSyst_Din, v_MStg_Din, v_Mstg_Addr, v_Fetch_addr :std_ulogic_vector(31 downto 0);
  
  VARIABLE v_MStg_Dout_valid,v_MemSyst_Dout_valid,v_Fetch_Dout_valid,v_MemSyst_Addr_valid :std_ulogic_vector(31 DOWNTO 0);
  VARIABLE v_mdelayF_valid,v_mdelayM_valid : std_ulogic;
           
begin
  readline(test_vectors,L);
  WHILE NOT endfile(test_vectors) LOOP
  
    readline(test_vectors,L); 
    read(L,v_permission_input);  Mstg_w<=v_permission_input(2); Mstg_r<=v_permission_input(1); Fetch_r<=v_permission_input(0);
    read(L,v_mdelay); mdelay<=v_mdelay;
    
    hread(L,v_MemSyst_Din); MemSyst_Din<=v_MemSyst_Din;
    hread(L,v_MStg_Din	);   MStg_Din	<=v_MStg_Din	;
    hread(L,v_Mstg_Addr	);  Mstg_Addr	<=v_Mstg_Addr	;
    hread(L,v_Fetch_addr	);  Fetch_addr	<=v_Fetch_addr	;
    
    check_valid<='0'; wait for 100ns;
    
    read(L,v_mdelayF_valid	); mdelayF_valid	<=v_mdelayF_valid;
    read(L,v_mdelayM_valid	); mdelayM_valid	<=v_mdelayM_valid;
    hread(L,v_MemSyst_Dout_valid	); MemSyst_Dout_valid<=v_MemSyst_Dout_valid;
    hread(L,v_MStg_Dout_valid		);  MStg_Dout_valid	<=v_MStg_Dout_valid;
    hread(L,v_Fetch_Dout_valid		);  Fetch_Dout_valid	<=v_Fetch_Dout_valid;
    hread(L,v_MemSyst_Addr_valid		);  MemSyst_Addr_valid	<=v_MemSyst_Addr_valid;
    
    
    check_valid<='0'; wait for 100ns;
  End Loop;
  report "END of TB";
  wait;
end process;
check: process(check_valid)
begin
  if falling_edge(check_valid) then
        vecno <= vecno + 1;
        
        
        ASSERT mdelayF=mdelayF_valid
        REPORT "ERROR: mdelayF " & to_string(vecno)
        SEVERITY WARNING; 
        
        ASSERT mdelayM=mdelayM_valid
        REPORT "ERROR: mdelayM " & to_string(vecno)
        SEVERITY WARNING;
        
        ASSERT MemSyst_Dout=MemSyst_Dout_valid
        REPORT "ERROR: MemSyst_Dout " & to_string(vecno)
        SEVERITY WARNING;
        
        ASSERT MStg_Dout=MStg_Dout_valid
        REPORT "ERROR: MStg_Dout " & to_string(vecno)
        SEVERITY WARNING;
        
        ASSERT Fetch_Dout=Fetch_Dout_valid
        REPORT "ERROR: Fetch_Dout " & to_string(vecno)
        SEVERITY WARNING;
        
        
        ASSERT MemSyst_Addr=MemSyst_Addr_valid
        REPORT "ERROR: MemSyst_Addr " & to_string(vecno)
        SEVERITY WARNING;
        
    
        
  end if;
end process;
END rtl;