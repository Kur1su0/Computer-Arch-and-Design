--
-- VHDL Test Bench CAD_lib.lab6_decode_pipeline_tb.lab6_decode_pipeline_tester
--
-- Created:
--          by - W.UNKNOWN (DESKTOP-86TQKQ1)
--          at - 02:37:57 03/22/2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
--
LIBRARY CAD_lib;
USE CAD_lib.RV32I.all;
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE work.RV32I.ALL;
USE std.textio.all;

ENTITY lab6_decode_pipeline_tb IS
   GENERIC (
      width : NATURAL RANGE 1 TO 64 := 32
   );
END lab6_decode_pipeline_tb;


LIBRARY CAD_lib;
USE CAD_lib.ALL;


ARCHITECTURE rtl OF lab6_decode_pipeline_tb IS

   -- Architecture declarations
    FILE test_vectors : text OPEN read_mode IS "lab6_vec.txt";	
   -- Internal signal declarations
   SIGNAL Inst    : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL Address : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL DataA   : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL DataB   : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL clk     : std_ulogic;
   
   
   SIGNAL Left,L_valid       : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL R,R_valid       : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL Extra,Extra_valid   : std_ulogic_vector(31 DOWNTO 0);
   SIGNAL Rs1,Rs1_valid     : std_ulogic_vector(4 DOWNTO 0);
   SIGNAL Rs2,Rs2_valid     : std_ulogic_vector(4 DOWNTO 0);
   SIGNAL Rd,Rd_valid      : std_ulogic_vector(4 DOWNTO 0);
   SIGNAL Rs1v,Rs1v_valid   : std_ulogic;
   SIGNAL Rs2v,  Rs2v_valid  : std_ulogic;
   SIGNAL Rdv,Rdv_valid     : std_ulogic;
   SIGNAL FunCode,FunCode_valid : RV32I_Op;
   SIGNAL vecno : NATURAL := 0;



  

   -- Component declarations
   COMPONENT lab6_decode_pipeline
      GENERIC (
         width : NATURAL RANGE 1 TO 64 := 32
      );
      PORT (
         Inst    : IN     std_logic_vector(31 DOWNTO 0);
         Address : IN     std_logic_vector(31 DOWNTO 0);
         DataA   : IN     std_logic_vector(31 DOWNTO 0);
         DataB   : IN     std_logic_vector(31 DOWNTO 0);
         clk     : IN     std_logic;
         L       : OUT    std_logic_vector(31 DOWNTO 0);
         R       : OUT    std_logic_vector(31 DOWNTO 0);
         Extra   : OUT    std_logic_vector(31 DOWNTO 0);
         Rs1     : OUT    std_logic_vector(4 DOWNTO 0);
         Rs2     : OUT    std_logic_vector(4 DOWNTO 0);
         Rd      : OUT    std_logic_vector(4 DOWNTO 0);
         Rs1v    : OUT    std_logic;
         Rs2v    : OUT    std_logic;
         Rdv     : OUT    std_logic;
         FunCode : OUT    RV32I_Op
      );
   END COMPONENT;

BEGIN
   testb :  ENTITY work.lab6_decode_pipeline(struc)

            GENERIC MAP (
               width => width
            )
            PORT MAP (
               Inst    => Inst,
               Address => Address,
               DataA   => DataA,
               DataB   => DataB,
               clk     => clk,
               L       => Left,
               R       => R,
               Extra   => Extra,
               Rs1     => Rs1,
               Rs2     => Rs2,
               Rd      => Rd,
               Rs1v    => Rs1v,
               Rs2v    => Rs2v,
               Rdv     => Rdv,
               FunCode => FunCode
            );
stim: process 

  VARIABLE L : LINE;
  VARIABLE v_in_fn7:std_ulogic_vector(6 DOWNTO 0);
  VARIABLE v_in_fn3: std_ulogic_vector(2 DOWNTO 0);
  VARIABLE v_in_rs2,v_in_rs1,v_in_rd,v_in_op :std_ulogic_vector(4 DOWNTO 0);
  VARIABLE v_out_rs2,v_out_rs1,v_out_rd :std_ulogic_vector(4 DOWNTO 0);
  VARIABLE v_in_inst,v_out_imm,v_address, v_dataA,v_dataB,vL_valid,vR_valid,vExtra_valid :std_ulogic_vector(31 downto 0);
  VARIABLE v_Function_op :     Func_Name;
  VARIABLE v_rs1v,v_rs2v,v_rdv: std_ulogic;
  VARIABLE v_last_two : std_ulogic_vector(1 downto 0);
  VARIABLE space:string(1 DOWNTO 1);
  
  
  begin
    readline(test_vectors,L);
    
    WHILE NOT endfile(test_vectors) LOOP
    
      readline(test_vectors,L); 
      
      
      read(L,v_DataA); DataA<=v_DataA;
      read(L,v_DataB); DataB<=v_DataB;
      read(L, v_address);Address<=v_address;
      --
      read(L,v_in_fn7); read(L,v_in_rs2);read(L,v_in_rs1);read(L,v_in_fn3); read(L,v_in_rd); read(L,v_in_op);read(L,v_last_two);
      
      Inst<=v_in_fn7&v_in_rs2&v_in_rs1&v_in_fn3&v_in_rd&v_in_op&v_last_two;
      
       
      
      
      
      
      
      
      
      
      clk<='0'; wait for 100ns;
      read(L,space); 
      read(L,v_Function_op);  FunCode_valid<=Ftype(v_Function_op);
      
      read(L,v_out_rd);   RD_valid<=v_out_rd;
      read(L,v_out_rs1);  RS1_valid<=v_out_rs1;
      read(L,v_out_rs2);  RS2_valid<=v_out_rs2;
      
      read(L,v_rdv);    RDv_valid<=v_rdv;
      read(L,v_rs1v);   RS1v_valid<=v_rs1v;
      read(L,v_rs2v);   RS2v_valid<=v_rs2v;
     
      --read(L,v_out_imm);  Immediate_valid<=v_out_imm;
      
      hread(L,vL_valid);     L_valid<=vL_valid;
      hread(L,vR_valid);     R_valid<=vR_valid;
      hread(L,vExtra_valid); Extra_valid<=vExtra_valid;
      clk<='1'; wait for 100ns;
      


   
    END LOOP;
    report "END of TB";
    wait;
  end process;
  
check: process(clk)
begin
  
  if falling_edge(clk) then
        vecno <= vecno + 1;
        
        ASSERT RS1 = RS1_valid
        REPORT "ERROR: rs2 " & to_string(vecno)
        SEVERITY WARNING;
        
        
        ASSERT RS2 = RS2_valid
        REPORT "ERROR: rs2 " & to_string(vecno)
        SEVERITY WARNING;
        
        ASSERT RD = RD_valid
        REPORT "ERROR: rd " & to_string(vecno)
        SEVERITY WARNING;
        
        ASSERT RS1v = RS1v_valid
        REPORT "ERROR: rs1v " & to_string(vecno)
        SEVERITY WARNING;
        
        ASSERT RS2v = RS2v_valid
        REPORT "ERROR: rs2v " & to_string(vecno)
        SEVERITY WARNING;
        
        
        ASSERT RDv = RDv_valid
        REPORT "ERROR: rdv " & to_string(vecno)
        SEVERITY WARNING;
        
        
        --L
        ASSERT Left = L_valid
        REPORT "ERROR: L " & to_string(vecno)
        SEVERITY WARNING;
        
        --R
        ASSERT R = R_valid
        REPORT "ERROR: L " & to_string(vecno)
        SEVERITY WARNING;
        
        --EX
        ASSERT Extra = Extra_valid
        REPORT "ERROR: L " & to_string(vecno)
        SEVERITY WARNING;
        
        
        ASSERT FunCode = FunCode_valid
        REPORT "ERROR: Function_op " & to_string(vecno)
        SEVERITY WARNING;  
        
     end if;   
       
      

end process;



END rtl;